syntax = "proto3";
package user;

// 用户服务
service UserService {
  // 基础信息
  rpc GetUserInfo(UserInfoRequest) returns (User) {}
  rpc UpdateUserInfo(UpdateUserRequest) returns (User) {}
  
  // 社交关系
  rpc GetUserFriends(FriendsRequest) returns (UserList) {}
  rpc FollowUser(FollowRequest) returns (RelationStatus) {}
  rpc UnfollowUser(FollowRequest) returns (RelationStatus) {}
  
  // 内容管理
  rpc GetUserCollect(CollectRequest) returns (UserCollectResponse) {}
  rpc GetUserVideoList(VideoListRequest) returns (VideoListResponse) {}
  rpc GetUserLikedVideos(VideoListRequest) returns (VideoListResponse) {}
  
  // 消息系统
  rpc GetMessages(MessageRequest) returns (MessageList) {}
  rpc SendMessage(NewMessage) returns (MessageStatus) {}
}

// 视频服务
service VideoService {
  // 视频获取
  rpc GetRecommendedVideos(VideoRequest) returns (VideoListResponse) {}
  rpc GetFollowingVideos(VideoRequest) returns (VideoListResponse) {}
  rpc GetPrivateVideos(VideoRequest) returns (VideoListResponse) {}
  rpc GetHistoryVideos(HistoryRequest) returns (VideoListResponse) {}
  
  // 互动功能
  rpc GetVideoComments(CommentRequest) returns (CommentList) {}
  rpc PostComment(NewComment) returns (Comment) {}
  rpc LikeVideo(LikeRequest) returns (LikeStatus) {}
  
  // 内容操作
  rpc PublishVideo(stream VideoUpload) returns (PublishStatus) {}
  rpc DeleteVideo(DeleteRequest) returns (OperationStatus) {}
  rpc ReportVideo(ReportRequest) returns (OperationStatus) {}
  
  // 扩展功能
  rpc SearchVideos(SearchRequest) returns (VideoListResponse) {}
  rpc GetVideoStream(StreamRequest) returns (stream VideoChunk) {}
}

// ========== 核心数据结构 ==========
message User {
  string id = 1;
  string uid = 2;
  string nickname = 3;
  string signature = 4;
  string unique_id = 5;
  string province = 6;
  string city = 7;
  int32 gender = 8;
  int32 user_age = 9;
  string ip_location = 10;
  string school_name = 19;
  string short_id = 20;
  string wechat = 21;
  RelateType relate_type = 22;
  
  // 媒体资源
  AvatarInfo avatar_168x168 = 11;
  AvatarInfo avatar_300x300 = 12;
  repeated CoverInfo cover_url = 13;
  repeated CoverInfo white_cover_url = 14;
  
  // 社交数据
  int64 follower_count = 15;
  int64 following_count = 16;
  int64 total_favorited = 17;
  int32 aweme_count = 18;
}

message Video {
  string aweme_id = 1;
  string desc = 2;
  int64 create_time = 3;
  string share_url = 4;
  int64 duration = 5;
  bool prevent_download = 13;
  
  // 关联实体
  Music music = 6;
  VideoInfo video = 7;
  Statistics statistics = 8;
  VideoStatus status = 9;
  Author author = 10;
  
  // 扩展内容
  repeated TextExtra text_extra = 11;
  RiskInfo risk_infos = 12;
}

// ========== 嵌套结构 ==========
message Music {
  int64 id = 1;
  string title = 2;
  string author = 3;
  int32 duration = 7;
  MediaInfo cover_medium = 4;
  MediaInfo cover_thumb = 5;
  MediaInfo play_url = 6;
}

message VideoInfo {
  PlayAddr play_addr = 1;
  MediaInfo cover = 2;
  string poster = 3;
  int32 height = 4;
  int32 width = 5;
  string ratio = 6;
}

message Author {
  string uid = 1;
  string nickname = 2;
  string signature = 3;
  string ip_location = 4;
  int64 follower_count = 5;
  AvatarInfo avatar_168x168 = 6;
}

// ========== 通用结构 ==========
message MediaInfo {
  string uri = 1;
  repeated string url_list = 2;
  int32 width = 3;
  int32 height = 4;
}

message PlayAddr {
  string uri = 1;
  repeated string url_list = 2;
  string url_key = 3;
  int32 data_size = 4;
}

// ========== 枚举类型 ==========
enum RelateType {
  REQUEST_FOLLOW = 0;
  FOLLOW_ME = 1;
  FOLLOW_HE = 2;
  FOLLOW_EACH_OTHER = 3;
}

enum ContentType {
  VIDEO = 0;
  IMAGE = 1;
  TEXT = 2;
}

enum VisibilityLevel {
  PUBLIC = 0;
  PRIVATE = 1;
  FRIENDS_ONLY = 2;
}

// ========== 请求/响应结构 ==========
message VideoRequest {
  int32 page_no = 1;
  int32 page_size = 2;
  VisibilityLevel visibility = 3;
}

message VideoUpload {
  oneof upload_type {
    bytes chunk_data = 1;
    VideoMetadata metadata = 2;
  }
}

message VideoMetadata {
  string title = 1;
  string desc = 2;
  string cover_uri = 3;
  VisibilityLevel visibility = 4;
  repeated string hashtags = 5;
}

message OperationStatus {
  bool success = 1;
  string error_code = 2;
  string message = 3;
  int64 timestamp = 4;
}

// ========== 流式传输 ==========
message VideoChunk {
  bytes data = 1;
  int32 chunk_number = 2;
  bool is_last = 3;
}

// ========== 其他结构 ==========
message Pagination {
  int32 page = 1;
  int32 page_size = 2;
  string sort_by = 3;
}

message SearchRequest {
  string query = 1;
  ContentType content_type = 2;
  Pagination page = 3;
}